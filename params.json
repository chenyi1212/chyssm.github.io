{
  "name": "JavaScript",
  "tagline": "chyssm 的博客",
  "body": "需要注意的是，这篇文章中的代码片段都在最新的Google Chrome（版本号30）上测试过，它使用V8 JavaScript引擎（V8 3.20.17.15）\r\n\r\n1 – 在第一次给一个变量赋值的时候不要忘记使用var关键字\r\n\r\n给一个未定义的变量赋值会导致创建一个全局变量。要避免全局变量。\r\n\r\n2 – 使用===，而不是＝＝\r\n\r\n==（或!=）操作符在需要的时候会自动执行类型转换。===（或!==）操作不会执行任何转换。它将比较值和类型，而且在速度上也被认为优于==。\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n[10] === 10    // is false\r\n[10]  == 10    // is true\r\n'10'== 10     // is true\r\n'10'=== 10    // is false\r\n []   == 0     // is true\r\n [] ===  0     // is false\r\n ''== false   // is true but true == \"a\" is false\r\n ''===   false// is false\r\n3 – 使用闭包实现私有变量（译者添加）\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\nfunctionPerson(name, age) {\r\n    this.getName = function() { returnname; };\r\n    this.setName = function(newName) { name = newName; };\r\n    this.getAge = function() { returnage; };\r\n    this.setAge = function(newAge) { age = newAge; };\r\n \r\n    //未在构造函数中初始化的属性\r\n    varoccupation;\r\n    this.getOccupation = function() { returnoccupation; };\r\n    this.setOccupation = function(newOcc) { occupation = \r\n                         newOcc; };\r\n}\r\n4 – 在语句结尾处使用分号\r\n\r\n在语句结尾处使用分号是一个很好的实践。如果你忘记写了你也不会被警告，因为多数情况下JavaScript解释器会帮你加上分号。\r\n\r\n5 – 创建对象的构造函数\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\nfunctionPerson(firstName, lastName){\r\n    this.firstName =  firstName;\r\n    this.lastName = lastName;\r\n}\r\n \r\nvarSaad = newPerson(\"Saad\", \"Mousliki\");\r\n6 – 小心使用typeof、instanceof和constructor\r\n\r\n1\r\n2\r\n3\r\n4\r\nvararr = [\"a\", \"b\", \"c\"];\r\ntypeofarr;   // return \"object\"\r\narr  instanceofArray// true\r\narr.constructor();  //[]\r\n7 – 创建一个自调用函数（Self-calling Funtion）\r\n\r\n这个经常被称为自调用匿名函数（Self-Invoked Anonymous Function）或者即时调用函数表达式（IIFE-Immediately Invoked Function Expression)。这是一个在创建后立即自动执行的函数，通常如下：\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n(function(){\r\n    // some private code that will be executed automatically\r\n})();\r\n(function(a,b){\r\n    varresult = a+b;\r\n    returnresult;\r\n})(10,20)\r\n8- 从数组中获取一个随机项\r\n\r\n1\r\n2\r\n3\r\nvaritems = [12, 548, 'a', 2, 5478, 'foo', 8852, , 'Doe', 2145, 119];\r\n \r\nvar  randomItem = items[Math.floor(Math.random() * items.length)];\r\n9 – 在特定范围内获取一个随机数\r\n\r\n这个代码片段在你想要生成测试数据的时候非常有用，比如一个在最小最大值之间的一个随机薪水值。\r\n\r\n1\r\nvarx = Math.floor(Math.random() * (max - min + 1)) + min;\r\n10 – 在0和设定的最大值之间生成一个数字数组\r\n\r\n1\r\n2\r\n3\r\nvarnumbersArray = [] , max = 100;\r\n \r\nfor( vari=1; numbersArray.push(i++) < max;);  // numbers = [0,1,2,3 ... 100]\r\n11 – 生成一个随机的数字字母字符串\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\nfunctiongenerateRandomAlphaNum(len) {\r\n    varrdmstring = \"\";\r\n    for( ; rdmString.length &lt; len; rdmString  += Math.random().toString(36).substr(2));\r\n    return  rdmString.substr(0, len);\r\n}\r\n【译者注：特意查了一下Math.random()生成0到1之间的随机数，number.toString(36)是将这个数字转换成36进制（0-9，a-z），最后substr去掉前面的“0.”字符串】\r\n\r\n12 – 打乱一个数字数组\r\n\r\n1\r\n2\r\n3\r\nvarnumbers = [5, 458, 120, -215, 228, 400, 122205, -85411];\r\nnumbers = numbers.sort(function(){ returnMath.random() - 0.5});\r\n/* the array numbers will be equal for example to [120, 5, 228, -215, 400, 458, -85411, 122205]  */\r\n13 – String的trim函数\r\n\r\n在Java、C#、PHP和很多其他语言中都有一个经典的 trim 函数，用来去除字符串中的空格符，而在JavaScript中并没有，所以我们需要在String对象上加上这个函数。\r\n\r\n1\r\nString.prototype.trim = function(){returnthis.replace(/^\\s+|\\s+$/g, \"\");};\r\n【译者注：去掉字符串的前后空格，不包括字符串内部空格】\r\n\r\n14 – 附加（append）一个数组到另一个数组上\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\nvararray1 = [12, \"foo\", {name: \"Joe\"} , -2458];\r\n \r\nvararray2 = [\"Doe\", 555, 100];\r\nArray.prototype.push.apply(array1, array2);\r\n/* array1 will be equal to  [12 , \"foo\" , {name \"Joe\"} , -2458 , \"Doe\" , 555 , 100] */\r\n【译者注：其实concat可以直接实现两个数组的连接，但是它的返回值是一个新的数组。这里是直接改变array1】\r\n\r\n15 – 将arguments对象转换成一个数组\r\n\r\n1\r\nvarargArray = Array.prototype.slice.call(arguments);\r\n【译者注：arguments对象是一个类数组对象，但不是一个真正的数组】\r\n\r\n16 – 验证参数是否是数字（number）\r\n\r\n1\r\n2\r\n3\r\nfunctionisNumber(n){\r\n    return!isNaN(parseFloat(n)) && isFinite(n);\r\n}\r\n17 – 验证参数是否是数组\r\n\r\n1\r\n2\r\n3\r\nfunctionisArray(obj){\r\n    returnObject.prototype.toString.call(obj) === '[object Array]';\r\n}\r\n注意：如果toString()方法被重写了（overridden），你使用这个技巧就不能得到想要的结果了。或者你可以使用：\r\n\r\n1\r\nArray.isArray(obj); // 这是一个新的array的方法\r\n如果你不在使用多重frames的情况下，你还可以使用 instanceof 方法。但如果你有多个上下文，你就会得到错误的结果。\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\nvarmyFrame = document.createElement('iframe');\r\ndocument.body.appendChild(myFrame);\r\n \r\nvarmyArray = window.frames[window.frames.length-1].Array;\r\nvararr = newmyArray(a,b,10); // [a,b,10]\r\n \r\n// instanceof will not work correctly, myArray loses his constructor\r\n// constructor is not shared between frames\r\narr instanceofArray; // false\r\n【译者注：关于如何判断数组网上有不少讨论，大家可以google一下。这篇就写的挺详细的。】\r\n\r\n18 – 获取一个数字数组中的最大值或最小值\r\n\r\n1\r\n2\r\n3\r\nvar  numbers = [5, 458, 120, -215, 228, 400, 122205, -85411];\r\nvarmaxInNumbers = Math.max.apply(Math, numbers);\r\nvarminInNumbers = Math.min.apply(Math, numbers);\r\n【译者注：这里使用了Function.prototype.apply方法传递参数的技巧】\r\n\r\n19 – 清空一个数组\r\n\r\n1\r\n2\r\nvarmyArray = [12, 222, 1000];\r\nmyArray.length = 0; // myArray will be equal to [].\r\n20 – 不要使用 delete 来删除一个数组中的项。\r\n\r\n使用 splice 而不要使用 delete 来删除数组中的某个项。使用 delete 只是用 undefined 来替换掉原有的项，并不是真正的从数组中删除。\r\n\r\n不要使用这种方式：\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\nvaritems = [12, 548,'a', 2, 5478, 'foo', 8852, , 'Doe',2154, 119];\r\nitems.length; // return 11\r\ndeleteitems[3]; // return true\r\nitems.length; // return 11\r\n/* items will be equal to [12, 548, \"a\", undefined × 1, 5478, \"foo\", 8852, undefined × 1, \"Doe\", 2154,       119]   */\r\n而使用：\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\nvaritems = [12, 548,'a', 2, 5478, 'foo', 8852, , 'Doe',2154, 119];\r\nitems.length; // return 11\r\nitems.splice(3,1) ;\r\nitems.length; // return 10\r\n/* items will be equal to [12, 548, \"a\", 5478, \"foo\", 8852, undefined × 1, \"Doe\", 2154,       119]   */\r\ndelete 方法应该被用来删除一个对象的某个属性。\r\n\r\n21 – 使用 length 来截短一个数组\r\n\r\n跟上面的清空数组的方式类似，我们使用 length 属性来截短一个数组。\r\n\r\n1\r\n2\r\nvarmyArray = [12, 222, 1000, 124, 98, 10];\r\nmyArray.length = 4; // myArray will be equal to [12 , 222 , 1000 , 124].\r\n此外，如果你将一个数组的 length 设置成一个比现在大的值，那么这个数组的长度就会被改变，会增加新的 undefined 的项补上。 数组的 length 不是一个只读属性。\r\n\r\n1\r\n2\r\nmyArray.length = 10; // the new array length is 10\r\nmyArray[myArray.length - 1] ; // undefined\r\n22 – 使用逻辑 AND/OR 做条件判断\r\n\r\n1\r\n2\r\n3\r\nvarfoo = 10;\r\nfoo == 10&& doSomething(); // 等价于 if (foo == 10) doSomething();\r\nfoo == 5|| doSomething(); // 等价于 if (foo != 5) doSomething();\r\n逻辑 AND 还可以被使用来为函数参数设置默认值\r\n\r\n1\r\n2\r\n3\r\nfunctiondoSomething(arg1){\r\n    Arg1 = arg1 || 10; // 如果arg1没有被设置的话，Arg1将被默认设成10\r\n}\r\n23 – 使用 map() 方法来遍历一个数组里的项\r\n\r\n1\r\n2\r\n3\r\n4\r\nvarsquares = [1,2,3,4].map(function(val) {\r\n    returnval * val;\r\n});\r\n// squares will be equal to [1, 4, 9, 16]\r\n24 – 四舍五入一个数字，保留N位小数\r\n\r\n1\r\n2\r\nvarnum =2.443242342;\r\nnum = num.toFixed(4);  // num will be equal to 2.4432\r\n25 – 浮点数问题\r\n\r\n1\r\n2\r\n3\r\n0.1+ 0.2=== 0.3// is false\r\n9007199254740992+ 1// is equal to 9007199254740992\r\n9007199254740992+ 2// is equal to 9007199254740994\r\n为什么会这样？ 0.1+0.2等于0.30000000000000004。你要知道，所有的JavaScript数字在内部都是以64位二进制表示的浮点数，符合IEEE 754标准。更多的介绍，可以阅读这篇博文。你可以使用 toFixed() 和 toPrecision() 方法解决这个问题。\r\n\r\n26 – 使用for-in遍历一个对象内部属性的时候注意检查属性\r\n\r\n下面的代码片段能够避免在遍历一个对象属性的时候访问原型的属性\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\nfor(varname inobject) {\r\n    if(object.hasOwnProperty(name)) {\r\n        // do something with name\r\n    }\r\n}\r\n27 – 逗号操作符\r\n\r\n1\r\n2\r\n3\r\n4\r\nvara = 0;\r\nvarb = ( a++, 99);\r\nconsole.log(a);  // a will be equal to 1\r\nconsole.log(b);  // b is equal to 99\r\n28 – 缓存需要计算和查询（calculation or querying）的变量\r\n\r\n对于jQuery选择器，我们最好缓存这些DOM元素。\r\n\r\n1\r\n2\r\n3\r\n4\r\nvarnavright = document.querySelector('#right');\r\nvarnavleft = document.querySelector('#left');\r\nvarnavup = document.querySelector('#up');\r\nvarnavdown = document.querySelector('#down');\r\n29 – 在调用 isFinite()之前验证参数\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\nisFinite(0/0) ; // false\r\nisFinite(\"foo\"); // false\r\nisFinite(\"10\"); // true\r\nisFinite(10);   // true\r\nisFinite(undifined);  // false\r\nisFinite();   // false\r\nisFinite(null);  // true  !!!\r\n30 – 避免数组中的负数索引（negative indexes）\r\n\r\n1\r\n2\r\n3\r\nvarnumbersArray = [1,2,3,4,5];\r\nvarfrom = numbersArray.indexOf(\"foo\") ;  // from is equal to -1\r\nnumbersArray.splice(from,2);    // will return [5]\r\n确保调用 indexOf 时的参数不是负数。\r\n\r\n31 – 基于JSON的序列化和反序列化（serialization and deserialization）\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\nvarperson = {name :'Saad', age : 26, department : {ID : 15, name : \"R&D\"} };\r\nvarstringFromPerson = JSON.stringify(person);\r\n/* stringFromPerson is equal to \"{\"name\":\"Saad\",\"age\":26,\"department\":{\"ID\":15,\"name\":\"R&D\"}}\"   */\r\nvarpersonFromString = JSON.parse(stringFromPerson);\r\n/* personFromString is equal to person object  */\r\n32 – 避免使用 eval() 和 Function 构造函数\r\n\r\n使用 eval 和 Function 构造函数是非常昂贵的操作，因为每次他们都会调用脚本引擎将源代码转换成可执行代码。\r\n\r\n1\r\n2\r\nvarfunc1 = newFunction(functionCode);\r\nvarfunc2 = eval(functionCode);\r\n33 – 避免使用 with()\r\n\r\n使用 with() 会插入一个全局变量。因此，同名的变量会被覆盖值而引起不必要的麻烦。\r\n\r\n34 – 避免使用 for-in 来遍历一个数组\r\n\r\n避免使用这样的方式：\r\n\r\n1\r\n2\r\n3\r\n4\r\nvarsum = 0;\r\nfor(vari inarrayNumbers) {\r\n    sum += arrayNumbers[i];\r\n}\r\n更好的方式是：\r\n\r\n1\r\n2\r\n3\r\n4\r\nvarsum = 0;\r\nfor(vari = 0, len = arrayNumbers.length; i < len; i++) {\r\n    sum += arrayNumbers[i];\r\n}\r\n附加的好处是，i 和 len 两个变量的取值都只执行了一次，会比下面的方式更高效：\r\n\r\n1\r\nfor(vari = 0; i < arrayNumbers.length; i++)\r\n为什么？因为arrayNumbers.length每次循环的时候都会被计算。\r\n\r\n35 – 在调用 setTimeout() 和 setInterval() 的时候传入函数，而不是字符串。\r\n\r\n如果你将字符串传递给 setTimeout() 或者 setInterval()，这个字符串将被如使用 eval 一样被解析，这个是非常耗时的。\r\n不要使用：\r\n\r\n1\r\n2\r\nsetInterval('doSomethingPeriodically()', 1000);\r\nsetTimeOut('doSomethingAfterFiveSeconds()', 5000)\r\n而用：\r\n\r\n1\r\n2\r\nsetInterval(doSomethingPeriodically, 1000);\r\nsetTimeOut(doSomethingAfterFiveSeconds, 5000);\r\n36 – 使用 switch/case 语句，而不是一长串的 if/else\r\n\r\n在判断情况大于2种的时候，使用 switch/case 更高效，而且更优雅（更易于组织代码）。但在判断的情况超过10种的时候不要使用 switch/case。\r\n【译者注：查了一下文献，大家可以看一下这篇介绍】\r\n\r\n37 – 在判断数值范围时使用 switch/case\r\n\r\n在下面的这种情况，使用 switch/case 判断数值范围的时候是合理的：\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\nfunctiongetCategory(age) {\r\n    varcategory = \"\";\r\n    switch(true) {\r\n        caseisNaN(age):\r\n            category = \"not an age\";\r\n            break;\r\n        case(age >= 50):\r\n            category = \"Old\";\r\n            break;\r\n        case(age <= 20):\r\n            category = \"Baby\";\r\n            break;\r\n        default:\r\n            category = \"Young\";\r\n            break;\r\n    };\r\n    returncategory;\r\n}\r\ngetCategory(5);  // will return \"Baby\"\r\n【译者注：一般对于数值范围的判断，用 if/else 会比较合适。 switch/case 更适合对确定数值的判断】\r\n\r\n38 – 为创建的对象指定prototype对象\r\n\r\n写一个函数来创建一个以指定参数作为prototype的对象是有可能：\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\nfunctionclone(object) {\r\n    functionOneShotConstructor(){};\r\n    OneShotConstructor.prototype= object;\r\n    returnnewOneShotConstructor();\r\n}\r\nclone(Array).prototype ;  // []\r\n39 – 一个HTML转义函数\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\nfunctionescapeHTML(text) {\r\n    varreplacements= {\"<\": \"<\", \">\": \">\",\"&\": \"&\", \"\\\"\": \"\"\"};\r\n    returntext.replace(/[<>&\"]/g, function(character) {\r\n        returnreplacements[character];\r\n    });\r\n}\r\n40 – 避免在循环内部使用 try-catch-finally\r\n\r\n在运行时，每次当 catch 从句被执行的时候，被捕获的异常对象会赋值给一个变量，而在 try-catch-finally 结构中，每次都会新建这个变量。\r\n\r\n避免这样的写法：\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\nvarobject = ['foo', 'bar'], i;\r\nfor(i = 0, len = object.length; i <len; i++) {\r\n    try{\r\n        // do something that throws an exception\r\n    }\r\n    catch(e) {\r\n        // handle exception\r\n    }\r\n}\r\n而使用：\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\nvarobject = ['foo', 'bar'], i;\r\ntry{\r\n    for(i = 0, len = object.length; i <len; i++) {\r\n        // do something that throws an exception\r\n    }\r\n}\r\ncatch(e) {\r\n    // handle exception\r\n}\r\n41 – 为 XMLHttpRequests 设置超时。\r\n\r\n在一个XHR请求占用很长时间后（比如由于网络问题），你可能需要中止这次请求，那么你可以对XHR调用配套使用 setTimeout()。\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\nvarxhr = newXMLHttpRequest ();\r\nxhr.onreadystatechange = function() {\r\n    if(this.readyState == 4) {\r\n        clearTimeout(timeout);\r\n        // do something with response data\r\n    }\r\n}\r\nvartimeout = setTimeout( function() {\r\n    xhr.abort(); // call error callback\r\n}, 60*1000/* timeout after a minute */);\r\nxhr.open('GET', url, true);  \r\n \r\nxhr.send();\r\n此外，一般你应该完全避免同步的Ajax请求。\r\n\r\n42 – 处理WebSocket超时\r\n\r\n通常，在一个WebSocket连接创建之后，如果你没有活动的话，服务器会在30秒之后断开（time out）你的连接。防火墙也会在一段时间不活动之后断开连接。\r\n\r\n为了防止超时的问题，你可能需要间歇性地向服务器端发送空消息。要这样做的话，你可以在你的代码里添加下面的两个函数：一个用来保持连接，另一个用来取消连接的保持。通过这个技巧，你可以控制超时的问题。\r\n\r\n使用一个 timerID：\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\nvartimerID = 0;\r\nfunctionkeepAlive() {\r\n    vartimeout = 15000;\r\n    if(webSocket.readyState == webSocket.OPEN) {\r\n        webSocket.send('');\r\n    }\r\n    timerId = setTimeout(keepAlive, timeout);\r\n}\r\nfunctioncancelKeepAlive() {\r\n    if(timerId) {\r\n        cancelTimeout(timerId);\r\n    }\r\n}\r\nkeepAlive()方法应该被添加在webSOcket连接的 onOpen() 方法的最后，而 cancelKeepAlive() 添加在 onClose() 方法的最后。\r\n\r\n43 – 牢记，原始运算符始终比函数调用要高效。使用VanillaJS。\r\n\r\n举例来说，不使用：\r\n\r\n1\r\n2\r\nvarmin = Math.min(a,b);\r\nA.push(v);\r\n而用：\r\n\r\n1\r\n2\r\nvarmin = a < b ? a b;\r\nA[A.length] = v;\r\n44 – 编码的时候不要忘记使用代码整洁工具。在上线之前使用JSLint和代码压缩工具（minification）（比如JSMin）。《省时利器：代码美化与格式化工具》\r\n\r\n45 – JavaScript是不可思议的。最好的JavaScript学习资源。",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}